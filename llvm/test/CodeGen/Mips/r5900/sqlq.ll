; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc -mtriple=mips64el-ps2-elf -O0 --disable-machine-licm -mcpu=r5900 -verify-machineinstrs < %s | \
; RUN:   FileCheck %s -check-prefix=R5900O0
; RUN: llc -mtriple=mips64el-ps2-elf -O1 --disable-machine-licm -mcpu=r5900 -verify-machineinstrs < %s | \
; RUN:   FileCheck %s -check-prefix=R5900O1
; RUN: llc -mtriple=mips64el-ps2-elf -O2 --disable-machine-licm -mcpu=r5900 -verify-machineinstrs < %s | \
; RUN:   FileCheck %s -check-prefix=R5900O2

@x = common global i128 0, align 16
@y = common global i128 0, align 16

; TODO(davide.mor): Maybe support generating lq $zero, addr here?
define void @Store128() nounwind {
; R5900O0-LABEL: Store128:
; R5900O0:       # %bb.0:
; R5900O0-NEXT:    lui $1, %hi(x)
; R5900O0-NEXT:    daddiu $2, $zero, 0
; R5900O0-NEXT:    sd $zero, %lo(x)($1)
; R5900O0-NEXT:    addiu $1, $1, %lo(x)
; R5900O0-NEXT:    sd $zero, 8($1)
; R5900O0-NEXT:    jr $ra
; R5900O0-NEXT:    nop
;
; R5900O1-LABEL: Store128:
; R5900O1:       # %bb.0:
; R5900O1-NEXT:    lui $1, %hi(x)
; R5900O1-NEXT:    sd $zero, %lo(x)($1)
; R5900O1-NEXT:    addiu $1, $1, %lo(x)
; R5900O1-NEXT:    jr $ra
; R5900O1-NEXT:    sd $zero, 8($1)
;
; R5900O2-LABEL: Store128:
; R5900O2:       # %bb.0:
; R5900O2-NEXT:    lui $1, %hi(x)
; R5900O2-NEXT:    sd $zero, %lo(x)($1)
; R5900O2-NEXT:    addiu $1, $1, %lo(x)
; R5900O2-NEXT:    jr $ra
; R5900O2-NEXT:    sd $zero, 8($1)
  store i128 0, ptr @x
  ret void
}

; TODO(davide.mor): Maybe support generating lq + sq here?
define void @Move128() nounwind {
; R5900O0-LABEL: Move128:
; R5900O0:       # %bb.0:
; R5900O0-NEXT:    lui $2, %hi(x)
; R5900O0-NEXT:    ld $1, %lo(x)($2)
; R5900O0-NEXT:    addiu $2, $2, %lo(x)
; R5900O0-NEXT:    ld $3, 8($2)
; R5900O0-NEXT:    lui $2, %hi(y)
; R5900O0-NEXT:    addiu $4, $2, %lo(y)
; R5900O0-NEXT:    sd $3, 8($4)
; R5900O0-NEXT:    sd $1, %lo(y)($2)
; R5900O0-NEXT:    jr $ra
; R5900O0-NEXT:    nop
;
; R5900O1-LABEL: Move128:
; R5900O1:       # %bb.0:
; R5900O1-NEXT:    lui $1, %hi(x)
; R5900O1-NEXT:    ld $2, %lo(x)($1)
; R5900O1-NEXT:    lui $3, %hi(y)
; R5900O1-NEXT:    sd $2, %lo(y)($3)
; R5900O1-NEXT:    addiu $2, $3, %lo(y)
; R5900O1-NEXT:    addiu $1, $1, %lo(x)
; R5900O1-NEXT:    ld $1, 8($1)
; R5900O1-NEXT:    jr $ra
; R5900O1-NEXT:    sd $1, 8($2)
;
; R5900O2-LABEL: Move128:
; R5900O2:       # %bb.0:
; R5900O2-NEXT:    lui $1, %hi(x)
; R5900O2-NEXT:    ld $2, %lo(x)($1)
; R5900O2-NEXT:    lui $3, %hi(y)
; R5900O2-NEXT:    sd $2, %lo(y)($3)
; R5900O2-NEXT:    addiu $2, $3, %lo(y)
; R5900O2-NEXT:    addiu $1, $1, %lo(x)
; R5900O2-NEXT:    ld $1, 8($1)
; R5900O2-NEXT:    jr $ra
; R5900O2-NEXT:    sd $1, 8($2)
  %1 = load i128, ptr @x
  store i128 %1, ptr @y
  ret void
}
