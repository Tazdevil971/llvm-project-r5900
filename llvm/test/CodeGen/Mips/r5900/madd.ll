; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=mips64el-ps2-elf -O1 --disable-machine-licm -mcpu=r5900 -verify-machineinstrs < %s | \
; RUN:   FileCheck %s -check-prefix=R5900

; Performs a normal madd on 64bits, sign extended operands
define i64 @MAdd1(i64 %a, i32 signext %b, i32 signext %c) {
; R5900-LABEL: MAdd1:
; R5900:       # %bb.0:
; R5900-NEXT:    sll $1, $4, 0
; R5900-NEXT:    dsrl $2, $4, 32
; R5900-NEXT:    sll $2, $2, 0
; R5900-NEXT:    mtlo $1
; R5900-NEXT:    mthi $2
; R5900-NEXT:    madd $1, $5, $6
; R5900-NEXT:    mfhi $2
; R5900-NEXT:    dsll $1, $1, 32
; R5900-NEXT:    dsrl $1, $1, 32
; R5900-NEXT:    dsll $2, $2, 32
; R5900-NEXT:    jr $ra
; R5900-NEXT:    or $2, $1, $2
  %1 = sext i32 %b to i64
  %2 = sext i32 %c to i64
  %3 = mul i64 %1, %2
  %4 = add i64 %3, %a
  ret i64 %4
}

; Performs a normal madd on 64bits, zero extended operands
define i64 @MAdd2(i64 %a, i32 signext %b, i32 signext %c) {
; R5900-LABEL: MAdd2:
; R5900:       # %bb.0:
; R5900-NEXT:    sll $1, $4, 0
; R5900-NEXT:    dsrl $2, $4, 32
; R5900-NEXT:    sll $2, $2, 0
; R5900-NEXT:    mtlo $1
; R5900-NEXT:    mthi $2
; R5900-NEXT:    maddu $1, $5, $6
; R5900-NEXT:    mfhi $2
; R5900-NEXT:    dsll $1, $1, 32
; R5900-NEXT:    dsrl $1, $1, 32
; R5900-NEXT:    dsll $2, $2, 32
; R5900-NEXT:    jr $ra
; R5900-NEXT:    or $2, $1, $2
  %1 = zext i32 %b to i64
  %2 = zext i32 %c to i64
  %3 = mul i64 %1, %2
  %4 = add i64 %3, %a
  ret i64 %4
}

; Tries to perform a madd on 32bit integers
define i32 @MAdd3(i32 signext %a, i32 signext %b, i32 signext %c) {
; R5900-LABEL: MAdd3:
; R5900:       # %bb.0:
; R5900-NEXT:    addiu $1, $zero, 0
; R5900-NEXT:    mtlo $4
; R5900-NEXT:    mthi $1
; R5900-NEXT:    jr $ra
; R5900-NEXT:    madd $2, $5, $6
  %1 = mul i32 %b, %c
  %2 = add i32 %a, %1

  ret i32 %2
}

; Implements (a * b) + (c * d) + (e * f), which should generate a chain of madd
define i64 @MAdd4(i32 signext %a, i32 signext %b, i32 signext %c,
; R5900-LABEL: MAdd4:
; R5900:       # %bb.0:
; R5900-NEXT:    mult $6, $7
; R5900-NEXT:    madd $4, $5
; R5900-NEXT:    madd $1, $8, $9
; R5900-NEXT:    mfhi $2
; R5900-NEXT:    dsll $1, $1, 32
; R5900-NEXT:    dsrl $1, $1, 32
; R5900-NEXT:    dsll $2, $2, 32
; R5900-NEXT:    jr $ra
; R5900-NEXT:    or $2, $1, $2
                  i32 signext %d, i32 signext %e, i32 signext %f) {
  %1 = sext i32 %a to i64
  %2 = sext i32 %b to i64
  %3 = sext i32 %c to i64
  %4 = sext i32 %d to i64
  %5 = sext i32 %e to i64
  %6 = sext i32 %f to i64
  %7 = mul i64 %1, %2
  %8 = mul i64 %3, %4
  %9 = mul i64 %5, %6
  %10 = add i64 %7, %8
  %11 = add i64 %9, %10
  ret i64 %11
}
