; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc -mtriple=mips64el-ps2-elf -O0 --disable-machine-licm -mcpu=r5900 -verify-machineinstrs < %s | \
; RUN:   FileCheck %s -check-prefix=R5900O0
; RUN: llc -mtriple=mips64el-ps2-elf -O1 --disable-machine-licm -mcpu=r5900 -verify-machineinstrs < %s | \
; RUN:   FileCheck %s -check-prefix=R5900O1
; RUN: llc -mtriple=mips64el-ps2-elf -O2 --disable-machine-licm -mcpu=r5900 -verify-machineinstrs < %s | \
; RUN:   FileCheck %s -check-prefix=R5900O2

@x = common global i128 0, align 16

define i32 @AtomicLoad32() nounwind {
; R5900O0-LABEL: AtomicLoad32:
; R5900O0:       # %bb.0:
; R5900O0-NEXT:    lui $1, %hi(x)
; R5900O0-NEXT:    lw $2, %lo(x)($1)
; R5900O0-NEXT:    jr $ra
; R5900O0-NEXT:    nop
;
; R5900O1-LABEL: AtomicLoad32:
; R5900O1:       # %bb.0:
; R5900O1-NEXT:    lui $1, %hi(x)
; R5900O1-NEXT:    jr $ra
; R5900O1-NEXT:    lw $2, %lo(x)($1)
;
; R5900O2-LABEL: AtomicLoad32:
; R5900O2:       # %bb.0:
; R5900O2-NEXT:    lui $1, %hi(x)
; R5900O2-NEXT:    jr $ra
; R5900O2-NEXT:    lw $2, %lo(x)($1)
  %1 = load atomic i32, ptr @x monotonic, align 4
  ret i32 %1
}

define i64 @AtomicLoad64() nounwind {
; R5900O0-LABEL: AtomicLoad64:
; R5900O0:       # %bb.0:
; R5900O0-NEXT:    lui $1, %hi(x)
; R5900O0-NEXT:    ld $2, %lo(x)($1)
; R5900O0-NEXT:    jr $ra
; R5900O0-NEXT:    nop
;
; R5900O1-LABEL: AtomicLoad64:
; R5900O1:       # %bb.0:
; R5900O1-NEXT:    lui $1, %hi(x)
; R5900O1-NEXT:    jr $ra
; R5900O1-NEXT:    ld $2, %lo(x)($1)
;
; R5900O2-LABEL: AtomicLoad64:
; R5900O2:       # %bb.0:
; R5900O2-NEXT:    lui $1, %hi(x)
; R5900O2-NEXT:    jr $ra
; R5900O2-NEXT:    ld $2, %lo(x)($1)
  %1 = load atomic i64, ptr @x monotonic, align 8
  ret i64 %1
}

define i128 @AtomicLoad128() nounwind {
; R5900O0-LABEL: AtomicLoad128:
; R5900O0:       # %bb.0:
; R5900O0-NEXT:    addiu $sp, $sp, -16
; R5900O0-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; R5900O0-NEXT:    lui $1, %hi(x)
; R5900O0-NEXT:    addiu $1, $1, %lo(x)
; R5900O0-NEXT:    # implicit-def: $a0_64
; R5900O0-NEXT:    move $4, $1
; R5900O0-NEXT:    daddiu $5, $zero, 0
; R5900O0-NEXT:    jal __atomic_load_16
; R5900O0-NEXT:    nop
; R5900O0-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; R5900O0-NEXT:    addiu $sp, $sp, 16
; R5900O0-NEXT:    jr $ra
; R5900O0-NEXT:    nop
;
; R5900O1-LABEL: AtomicLoad128:
; R5900O1:       # %bb.0:
; R5900O1-NEXT:    addiu $sp, $sp, -16
; R5900O1-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; R5900O1-NEXT:    lui $1, %hi(x)
; R5900O1-NEXT:    addiu $4, $1, %lo(x)
; R5900O1-NEXT:    jal __atomic_load_16
; R5900O1-NEXT:    daddiu $5, $zero, 0
; R5900O1-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; R5900O1-NEXT:    jr $ra
; R5900O1-NEXT:    addiu $sp, $sp, 16
;
; R5900O2-LABEL: AtomicLoad128:
; R5900O2:       # %bb.0:
; R5900O2-NEXT:    addiu $sp, $sp, -16
; R5900O2-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; R5900O2-NEXT:    lui $1, %hi(x)
; R5900O2-NEXT:    addiu $4, $1, %lo(x)
; R5900O2-NEXT:    jal __atomic_load_16
; R5900O2-NEXT:    daddiu $5, $zero, 0
; R5900O2-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; R5900O2-NEXT:    jr $ra
; R5900O2-NEXT:    addiu $sp, $sp, 16
  %1 = load atomic i128, ptr @x monotonic, align 16
  ret i128 %1
}

define void @AtomicStore32(i32 signext %val) nounwind {
; R5900O0-LABEL: AtomicStore32:
; R5900O0:       # %bb.0:
; R5900O0-NEXT:    move $1, $4
; R5900O0-NEXT:    lui $2, %hi(x)
; R5900O0-NEXT:    sw $1, %lo(x)($2)
; R5900O0-NEXT:    jr $ra
; R5900O0-NEXT:    nop
;
; R5900O1-LABEL: AtomicStore32:
; R5900O1:       # %bb.0:
; R5900O1-NEXT:    lui $1, %hi(x)
; R5900O1-NEXT:    jr $ra
; R5900O1-NEXT:    sw $4, %lo(x)($1)
;
; R5900O2-LABEL: AtomicStore32:
; R5900O2:       # %bb.0:
; R5900O2-NEXT:    lui $1, %hi(x)
; R5900O2-NEXT:    jr $ra
; R5900O2-NEXT:    sw $4, %lo(x)($1)
  store atomic i32 %val, ptr @x monotonic, align 4
  ret void
}

define void @AtomicStore64(i64 signext %val) nounwind {
; R5900O0-LABEL: AtomicStore64:
; R5900O0:       # %bb.0:
; R5900O0-NEXT:    lui $1, %hi(x)
; R5900O0-NEXT:    sd $4, %lo(x)($1)
; R5900O0-NEXT:    jr $ra
; R5900O0-NEXT:    nop
;
; R5900O1-LABEL: AtomicStore64:
; R5900O1:       # %bb.0:
; R5900O1-NEXT:    lui $1, %hi(x)
; R5900O1-NEXT:    jr $ra
; R5900O1-NEXT:    sd $4, %lo(x)($1)
;
; R5900O2-LABEL: AtomicStore64:
; R5900O2:       # %bb.0:
; R5900O2-NEXT:    lui $1, %hi(x)
; R5900O2-NEXT:    jr $ra
; R5900O2-NEXT:    sd $4, %lo(x)($1)
  store atomic i64 %val, ptr @x monotonic, align 8
  ret void
}

define void @AtomicStore128(i128 signext %val) nounwind {
; R5900O0-LABEL: AtomicStore128:
; R5900O0:       # %bb.0:
; R5900O0-NEXT:    addiu $sp, $sp, -16
; R5900O0-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; R5900O0-NEXT:    move $6, $5
; R5900O0-NEXT:    move $5, $4
; R5900O0-NEXT:    # kill: def $at_64 killed $a2_64
; R5900O0-NEXT:    # kill: def $a0_64 killed $a1_64
; R5900O0-NEXT:    lui $1, %hi(x)
; R5900O0-NEXT:    addiu $1, $1, %lo(x)
; R5900O0-NEXT:    # implicit-def: $a0_64
; R5900O0-NEXT:    move $4, $1
; R5900O0-NEXT:    daddiu $7, $zero, 0
; R5900O0-NEXT:    jal __atomic_store_16
; R5900O0-NEXT:    nop
; R5900O0-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; R5900O0-NEXT:    addiu $sp, $sp, 16
; R5900O0-NEXT:    jr $ra
; R5900O0-NEXT:    nop
;
; R5900O1-LABEL: AtomicStore128:
; R5900O1:       # %bb.0:
; R5900O1-NEXT:    addiu $sp, $sp, -16
; R5900O1-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; R5900O1-NEXT:    move $6, $5
; R5900O1-NEXT:    move $5, $4
; R5900O1-NEXT:    lui $1, %hi(x)
; R5900O1-NEXT:    addiu $4, $1, %lo(x)
; R5900O1-NEXT:    jal __atomic_store_16
; R5900O1-NEXT:    daddiu $7, $zero, 0
; R5900O1-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; R5900O1-NEXT:    jr $ra
; R5900O1-NEXT:    addiu $sp, $sp, 16
;
; R5900O2-LABEL: AtomicStore128:
; R5900O2:       # %bb.0:
; R5900O2-NEXT:    addiu $sp, $sp, -16
; R5900O2-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; R5900O2-NEXT:    move $6, $5
; R5900O2-NEXT:    move $5, $4
; R5900O2-NEXT:    lui $1, %hi(x)
; R5900O2-NEXT:    addiu $4, $1, %lo(x)
; R5900O2-NEXT:    jal __atomic_store_16
; R5900O2-NEXT:    daddiu $7, $zero, 0
; R5900O2-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; R5900O2-NEXT:    jr $ra
; R5900O2-NEXT:    addiu $sp, $sp, 16
  store atomic i128 %val, ptr @x monotonic, align 16
  ret void
}

define i32 @AtomicLoadAdd32(i32 signext %val) nounwind {
; R5900O0-LABEL: AtomicLoadAdd32:
; R5900O0:       # %bb.0:
; R5900O0-NEXT:    addiu $sp, $sp, -16
; R5900O0-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; R5900O0-NEXT:    move $5, $4
; R5900O0-NEXT:    # kill: def $at killed $a1
; R5900O0-NEXT:    addiu $2, $zero, %lo(x)
; R5900O0-NEXT:    lui $1, %hi(x)
; R5900O0-NEXT:    addu $1, $1, $2
; R5900O0-NEXT:    # implicit-def: $a0_64
; R5900O0-NEXT:    move $4, $1
; R5900O0-NEXT:    jal __sync_fetch_and_add_4
; R5900O0-NEXT:    nop
; R5900O0-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; R5900O0-NEXT:    addiu $sp, $sp, 16
; R5900O0-NEXT:    jr $ra
; R5900O0-NEXT:    nop
;
; R5900O1-LABEL: AtomicLoadAdd32:
; R5900O1:       # %bb.0:
; R5900O1-NEXT:    addiu $sp, $sp, -16
; R5900O1-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; R5900O1-NEXT:    move $5, $4
; R5900O1-NEXT:    addiu $1, $zero, %lo(x)
; R5900O1-NEXT:    lui $2, %hi(x)
; R5900O1-NEXT:    jal __sync_fetch_and_add_4
; R5900O1-NEXT:    addu $4, $2, $1
; R5900O1-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; R5900O1-NEXT:    jr $ra
; R5900O1-NEXT:    addiu $sp, $sp, 16
;
; R5900O2-LABEL: AtomicLoadAdd32:
; R5900O2:       # %bb.0:
; R5900O2-NEXT:    addiu $sp, $sp, -16
; R5900O2-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; R5900O2-NEXT:    move $5, $4
; R5900O2-NEXT:    addiu $1, $zero, %lo(x)
; R5900O2-NEXT:    lui $2, %hi(x)
; R5900O2-NEXT:    jal __sync_fetch_and_add_4
; R5900O2-NEXT:    addu $4, $2, $1
; R5900O2-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; R5900O2-NEXT:    jr $ra
; R5900O2-NEXT:    addiu $sp, $sp, 16
  %1 = atomicrmw add ptr @x, i32 %val monotonic
  ret i32 %1
}

define i64 @AtomicLoadAdd64(i64 signext %val) nounwind {
; R5900O0-LABEL: AtomicLoadAdd64:
; R5900O0:       # %bb.0:
; R5900O0-NEXT:    addiu $sp, $sp, -16
; R5900O0-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; R5900O0-NEXT:    move $5, $4
; R5900O0-NEXT:    addiu $2, $zero, %lo(x)
; R5900O0-NEXT:    lui $1, %hi(x)
; R5900O0-NEXT:    addu $1, $1, $2
; R5900O0-NEXT:    # implicit-def: $a0_64
; R5900O0-NEXT:    move $4, $1
; R5900O0-NEXT:    jal __sync_fetch_and_add_8
; R5900O0-NEXT:    nop
; R5900O0-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; R5900O0-NEXT:    addiu $sp, $sp, 16
; R5900O0-NEXT:    jr $ra
; R5900O0-NEXT:    nop
;
; R5900O1-LABEL: AtomicLoadAdd64:
; R5900O1:       # %bb.0:
; R5900O1-NEXT:    addiu $sp, $sp, -16
; R5900O1-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; R5900O1-NEXT:    move $5, $4
; R5900O1-NEXT:    addiu $1, $zero, %lo(x)
; R5900O1-NEXT:    lui $2, %hi(x)
; R5900O1-NEXT:    jal __sync_fetch_and_add_8
; R5900O1-NEXT:    addu $4, $2, $1
; R5900O1-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; R5900O1-NEXT:    jr $ra
; R5900O1-NEXT:    addiu $sp, $sp, 16
;
; R5900O2-LABEL: AtomicLoadAdd64:
; R5900O2:       # %bb.0:
; R5900O2-NEXT:    addiu $sp, $sp, -16
; R5900O2-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; R5900O2-NEXT:    move $5, $4
; R5900O2-NEXT:    addiu $1, $zero, %lo(x)
; R5900O2-NEXT:    lui $2, %hi(x)
; R5900O2-NEXT:    jal __sync_fetch_and_add_8
; R5900O2-NEXT:    addu $4, $2, $1
; R5900O2-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; R5900O2-NEXT:    jr $ra
; R5900O2-NEXT:    addiu $sp, $sp, 16
  %1 = atomicrmw add ptr @x, i64 %val monotonic
  ret i64 %1
}

define i128 @AtomicLoadAdd128(i128 signext %val) nounwind {
; R5900O0-LABEL: AtomicLoadAdd128:
; R5900O0:       # %bb.0:
; R5900O0-NEXT:    addiu $sp, $sp, -16
; R5900O0-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; R5900O0-NEXT:    move $6, $5
; R5900O0-NEXT:    move $5, $4
; R5900O0-NEXT:    # kill: def $at_64 killed $a2_64
; R5900O0-NEXT:    # kill: def $a0_64 killed $a1_64
; R5900O0-NEXT:    lui $1, %hi(x)
; R5900O0-NEXT:    addiu $1, $1, %lo(x)
; R5900O0-NEXT:    # implicit-def: $a0_64
; R5900O0-NEXT:    move $4, $1
; R5900O0-NEXT:    daddiu $7, $zero, 0
; R5900O0-NEXT:    jal __atomic_fetch_add_16
; R5900O0-NEXT:    nop
; R5900O0-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; R5900O0-NEXT:    addiu $sp, $sp, 16
; R5900O0-NEXT:    jr $ra
; R5900O0-NEXT:    nop
;
; R5900O1-LABEL: AtomicLoadAdd128:
; R5900O1:       # %bb.0:
; R5900O1-NEXT:    addiu $sp, $sp, -16
; R5900O1-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; R5900O1-NEXT:    move $6, $5
; R5900O1-NEXT:    move $5, $4
; R5900O1-NEXT:    lui $1, %hi(x)
; R5900O1-NEXT:    addiu $4, $1, %lo(x)
; R5900O1-NEXT:    jal __atomic_fetch_add_16
; R5900O1-NEXT:    daddiu $7, $zero, 0
; R5900O1-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; R5900O1-NEXT:    jr $ra
; R5900O1-NEXT:    addiu $sp, $sp, 16
;
; R5900O2-LABEL: AtomicLoadAdd128:
; R5900O2:       # %bb.0:
; R5900O2-NEXT:    addiu $sp, $sp, -16
; R5900O2-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; R5900O2-NEXT:    move $6, $5
; R5900O2-NEXT:    move $5, $4
; R5900O2-NEXT:    lui $1, %hi(x)
; R5900O2-NEXT:    addiu $4, $1, %lo(x)
; R5900O2-NEXT:    jal __atomic_fetch_add_16
; R5900O2-NEXT:    daddiu $7, $zero, 0
; R5900O2-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; R5900O2-NEXT:    jr $ra
; R5900O2-NEXT:    addiu $sp, $sp, 16
  %1 = atomicrmw add ptr @x, i128 %val monotonic
  ret i128 %1
}
