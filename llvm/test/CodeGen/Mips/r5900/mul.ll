; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc -mtriple=mips64el-ps2-elf -O0 --disable-machine-licm -mcpu=r5900 -verify-machineinstrs < %s | \
; RUN:   FileCheck %s -check-prefix=R5900O0
; RUN: llc -mtriple=mips64el-ps2-elf -O1 --disable-machine-licm -mcpu=r5900 -verify-machineinstrs < %s | \
; RUN:   FileCheck %s -check-prefix=R5900O1
; RUN: llc -mtriple=mips64el-ps2-elf -O2 --disable-machine-licm -mcpu=r5900 -verify-machineinstrs < %s | \
; RUN:   FileCheck %s -check-prefix=R5900O2

define i32 @Mul32(i32 signext %a, i32 signext %b) nounwind {
; R5900O0-LABEL: Mul32:
; R5900O0:       # %bb.0:
; R5900O0-NEXT:    move $2, $5
; R5900O0-NEXT:    move $1, $4
; R5900O0-NEXT:    mult $1, $2
; R5900O0-NEXT:    mflo $2
; R5900O0-NEXT:    jr $ra
; R5900O0-NEXT:    nop
;
; R5900O1-LABEL: Mul32:
; R5900O1:       # %bb.0:
; R5900O1-NEXT:    mult $4, $5
; R5900O1-NEXT:    jr $ra
; R5900O1-NEXT:    mflo $2
;
; R5900O2-LABEL: Mul32:
; R5900O2:       # %bb.0:
; R5900O2-NEXT:    mult $4, $5
; R5900O2-NEXT:    jr $ra
; R5900O2-NEXT:    mflo $2
  %1 = mul i32 %a, %b
  ret i32 %1
}

define i64 @Mul64(i64 signext %a, i64 signext %b) nounwind {
; R5900O0-LABEL: Mul64:
; R5900O0:       # %bb.0:
; R5900O0-NEXT:    addiu $sp, $sp, -16
; R5900O0-NEXT:    move $1, $5
; R5900O0-NEXT:    sll $3, $1, 0
; R5900O0-NEXT:    move $1, $4
; R5900O0-NEXT:    sll $2, $1, 0
; R5900O0-NEXT:    multu $2, $3
; R5900O0-NEXT:    mflo $1
; R5900O0-NEXT:    sw $1, 8($sp) # 8-byte Folded Spill
; R5900O0-NEXT:    mfhi $1
; R5900O0-NEXT:    sw $1, 12($sp) # 8-byte Folded Spill
; R5900O0-NEXT:    mfhi $1
; R5900O0-NEXT:    dsrl $5, $5, 32
; R5900O0-NEXT:    # kill: def $a1 killed $a1 killed $a1_64
; R5900O0-NEXT:    sll $5, $5, 0
; R5900O0-NEXT:    mult $2, $5
; R5900O0-NEXT:    mflo $2
; R5900O0-NEXT:    addu $1, $1, $2
; R5900O0-NEXT:    dsrl $2, $4, 32
; R5900O0-NEXT:    # kill: def $v0 killed $v0 killed $v0_64
; R5900O0-NEXT:    sll $2, $2, 0
; R5900O0-NEXT:    mult $2, $3
; R5900O0-NEXT:    mflo $2
; R5900O0-NEXT:    lw $3, 8($sp) # 8-byte Folded Reload
; R5900O0-NEXT:    mtlo $3
; R5900O0-NEXT:    lw $3, 12($sp) # 8-byte Folded Reload
; R5900O0-NEXT:    mthi $3
; R5900O0-NEXT:    addu $2, $1, $2
; R5900O0-NEXT:    # implicit-def: $at_64
; R5900O0-NEXT:    move $1, $2
; R5900O0-NEXT:    dsll $2, $1, 32
; R5900O0-NEXT:    mflo $1
; R5900O0-NEXT:    dsll $1, $1, 32
; R5900O0-NEXT:    dsrl $1, $1, 32
; R5900O0-NEXT:    or $2, $1, $2
; R5900O0-NEXT:    addiu $sp, $sp, 16
; R5900O0-NEXT:    jr $ra
; R5900O0-NEXT:    nop
;
; R5900O1-LABEL: Mul64:
; R5900O1:       # %bb.0:
; R5900O1-NEXT:    sll $1, $5, 0
; R5900O1-NEXT:    dsrl $2, $4, 32
; R5900O1-NEXT:    sll $2, $2, 0
; R5900O1-NEXT:    mult $2, $1
; R5900O1-NEXT:    mflo $2
; R5900O1-NEXT:    sll $3, $4, 0
; R5900O1-NEXT:    multu $3, $1
; R5900O1-NEXT:    mflo $1
; R5900O1-NEXT:    mfhi $4
; R5900O1-NEXT:    dsrl $5, $5, 32
; R5900O1-NEXT:    sll $5, $5, 0
; R5900O1-NEXT:    mult $3, $5
; R5900O1-NEXT:    mflo $3
; R5900O1-NEXT:    addu $3, $4, $3
; R5900O1-NEXT:    addu $2, $3, $2
; R5900O1-NEXT:    dsll $2, $2, 32
; R5900O1-NEXT:    dsll $1, $1, 32
; R5900O1-NEXT:    dsrl $1, $1, 32
; R5900O1-NEXT:    jr $ra
; R5900O1-NEXT:    or $2, $1, $2
;
; R5900O2-LABEL: Mul64:
; R5900O2:       # %bb.0:
; R5900O2-NEXT:    sll $1, $5, 0
; R5900O2-NEXT:    dsrl $2, $4, 32
; R5900O2-NEXT:    sll $2, $2, 0
; R5900O2-NEXT:    mult $2, $1
; R5900O2-NEXT:    mflo $2
; R5900O2-NEXT:    sll $3, $4, 0
; R5900O2-NEXT:    multu $3, $1
; R5900O2-NEXT:    mflo $1
; R5900O2-NEXT:    mfhi $4
; R5900O2-NEXT:    dsrl $5, $5, 32
; R5900O2-NEXT:    sll $5, $5, 0
; R5900O2-NEXT:    mult $3, $5
; R5900O2-NEXT:    mflo $3
; R5900O2-NEXT:    addu $3, $4, $3
; R5900O2-NEXT:    addu $2, $3, $2
; R5900O2-NEXT:    dsll $2, $2, 32
; R5900O2-NEXT:    dsll $1, $1, 32
; R5900O2-NEXT:    dsrl $1, $1, 32
; R5900O2-NEXT:    jr $ra
; R5900O2-NEXT:    or $2, $1, $2
  %1 = mul i64 %a, %b
  ret i64 %1
}

define i32 @UDiv32(i32 signext %a, i32 signext %b) nounwind {
; R5900O0-LABEL: UDiv32:
; R5900O0:       # %bb.0:
; R5900O0-NEXT:    move $1, $5
; R5900O0-NEXT:    move $2, $4
; R5900O0-NEXT:    divu $zero, $2, $1
; R5900O0-NEXT:    teq $1, $zero, 7
; R5900O0-NEXT:    mflo $2
; R5900O0-NEXT:    jr $ra
; R5900O0-NEXT:    nop
;
; R5900O1-LABEL: UDiv32:
; R5900O1:       # %bb.0:
; R5900O1-NEXT:    divu $zero, $4, $5
; R5900O1-NEXT:    teq $5, $zero, 7
; R5900O1-NEXT:    jr $ra
; R5900O1-NEXT:    mflo $2
;
; R5900O2-LABEL: UDiv32:
; R5900O2:       # %bb.0:
; R5900O2-NEXT:    divu $zero, $4, $5
; R5900O2-NEXT:    teq $5, $zero, 7
; R5900O2-NEXT:    jr $ra
; R5900O2-NEXT:    mflo $2
  %1 = udiv i32 %a, %b
  ret i32 %1
}

define i64 @UDiv64(i64 signext %a, i64 signext %b) nounwind {
; R5900O0-LABEL: UDiv64:
; R5900O0:       # %bb.0:
; R5900O0-NEXT:    addiu $sp, $sp, -16
; R5900O0-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; R5900O0-NEXT:    jal __udivdi3
; R5900O0-NEXT:    nop
; R5900O0-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; R5900O0-NEXT:    addiu $sp, $sp, 16
; R5900O0-NEXT:    jr $ra
; R5900O0-NEXT:    nop
;
; R5900O1-LABEL: UDiv64:
; R5900O1:       # %bb.0:
; R5900O1-NEXT:    addiu $sp, $sp, -16
; R5900O1-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; R5900O1-NEXT:    jal __udivdi3
; R5900O1-NEXT:    nop
; R5900O1-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; R5900O1-NEXT:    jr $ra
; R5900O1-NEXT:    addiu $sp, $sp, 16
;
; R5900O2-LABEL: UDiv64:
; R5900O2:       # %bb.0:
; R5900O2-NEXT:    addiu $sp, $sp, -16
; R5900O2-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; R5900O2-NEXT:    jal __udivdi3
; R5900O2-NEXT:    nop
; R5900O2-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; R5900O2-NEXT:    jr $ra
; R5900O2-NEXT:    addiu $sp, $sp, 16
  %1 = udiv i64 %a, %b
  ret i64 %1
}

define i32 @SDiv32(i32 signext %a, i32 signext %b) nounwind {
; R5900O0-LABEL: SDiv32:
; R5900O0:       # %bb.0:
; R5900O0-NEXT:    move $1, $5
; R5900O0-NEXT:    move $2, $4
; R5900O0-NEXT:    div $zero, $2, $1
; R5900O0-NEXT:    teq $1, $zero, 7
; R5900O0-NEXT:    mflo $2
; R5900O0-NEXT:    jr $ra
; R5900O0-NEXT:    nop
;
; R5900O1-LABEL: SDiv32:
; R5900O1:       # %bb.0:
; R5900O1-NEXT:    div $zero, $4, $5
; R5900O1-NEXT:    teq $5, $zero, 7
; R5900O1-NEXT:    jr $ra
; R5900O1-NEXT:    mflo $2
;
; R5900O2-LABEL: SDiv32:
; R5900O2:       # %bb.0:
; R5900O2-NEXT:    div $zero, $4, $5
; R5900O2-NEXT:    teq $5, $zero, 7
; R5900O2-NEXT:    jr $ra
; R5900O2-NEXT:    mflo $2
  %1 = sdiv i32 %a, %b
  ret i32 %1
}

define i64 @SDiv64(i64 signext %a, i64 signext %b) nounwind {
; R5900O0-LABEL: SDiv64:
; R5900O0:       # %bb.0:
; R5900O0-NEXT:    addiu $sp, $sp, -16
; R5900O0-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; R5900O0-NEXT:    jal __divdi3
; R5900O0-NEXT:    nop
; R5900O0-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; R5900O0-NEXT:    addiu $sp, $sp, 16
; R5900O0-NEXT:    jr $ra
; R5900O0-NEXT:    nop
;
; R5900O1-LABEL: SDiv64:
; R5900O1:       # %bb.0:
; R5900O1-NEXT:    addiu $sp, $sp, -16
; R5900O1-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; R5900O1-NEXT:    jal __divdi3
; R5900O1-NEXT:    nop
; R5900O1-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; R5900O1-NEXT:    jr $ra
; R5900O1-NEXT:    addiu $sp, $sp, 16
;
; R5900O2-LABEL: SDiv64:
; R5900O2:       # %bb.0:
; R5900O2-NEXT:    addiu $sp, $sp, -16
; R5900O2-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; R5900O2-NEXT:    jal __divdi3
; R5900O2-NEXT:    nop
; R5900O2-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; R5900O2-NEXT:    jr $ra
; R5900O2-NEXT:    addiu $sp, $sp, 16
  %1 = sdiv i64 %a, %b
  ret i64 %1
}

define i32 @URem32(i32 signext %a, i32 signext %b) nounwind {
; R5900O0-LABEL: URem32:
; R5900O0:       # %bb.0:
; R5900O0-NEXT:    move $1, $5
; R5900O0-NEXT:    move $2, $4
; R5900O0-NEXT:    divu $zero, $2, $1
; R5900O0-NEXT:    teq $1, $zero, 7
; R5900O0-NEXT:    mfhi $2
; R5900O0-NEXT:    jr $ra
; R5900O0-NEXT:    nop
;
; R5900O1-LABEL: URem32:
; R5900O1:       # %bb.0:
; R5900O1-NEXT:    divu $zero, $4, $5
; R5900O1-NEXT:    teq $5, $zero, 7
; R5900O1-NEXT:    jr $ra
; R5900O1-NEXT:    mfhi $2
;
; R5900O2-LABEL: URem32:
; R5900O2:       # %bb.0:
; R5900O2-NEXT:    divu $zero, $4, $5
; R5900O2-NEXT:    teq $5, $zero, 7
; R5900O2-NEXT:    jr $ra
; R5900O2-NEXT:    mfhi $2
  %1 = urem i32 %a, %b
  ret i32 %1
}

define i64 @URem64(i64 signext %a, i64 signext %b) nounwind {
; R5900O0-LABEL: URem64:
; R5900O0:       # %bb.0:
; R5900O0-NEXT:    addiu $sp, $sp, -16
; R5900O0-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; R5900O0-NEXT:    jal __umoddi3
; R5900O0-NEXT:    nop
; R5900O0-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; R5900O0-NEXT:    addiu $sp, $sp, 16
; R5900O0-NEXT:    jr $ra
; R5900O0-NEXT:    nop
;
; R5900O1-LABEL: URem64:
; R5900O1:       # %bb.0:
; R5900O1-NEXT:    addiu $sp, $sp, -16
; R5900O1-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; R5900O1-NEXT:    jal __umoddi3
; R5900O1-NEXT:    nop
; R5900O1-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; R5900O1-NEXT:    jr $ra
; R5900O1-NEXT:    addiu $sp, $sp, 16
;
; R5900O2-LABEL: URem64:
; R5900O2:       # %bb.0:
; R5900O2-NEXT:    addiu $sp, $sp, -16
; R5900O2-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; R5900O2-NEXT:    jal __umoddi3
; R5900O2-NEXT:    nop
; R5900O2-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; R5900O2-NEXT:    jr $ra
; R5900O2-NEXT:    addiu $sp, $sp, 16
  %1 = urem i64 %a, %b
  ret i64 %1
}

define i32 @SRem32(i32 signext %a, i32 signext %b) nounwind {
; R5900O0-LABEL: SRem32:
; R5900O0:       # %bb.0:
; R5900O0-NEXT:    move $1, $5
; R5900O0-NEXT:    move $2, $4
; R5900O0-NEXT:    div $zero, $2, $1
; R5900O0-NEXT:    teq $1, $zero, 7
; R5900O0-NEXT:    mfhi $2
; R5900O0-NEXT:    jr $ra
; R5900O0-NEXT:    nop
;
; R5900O1-LABEL: SRem32:
; R5900O1:       # %bb.0:
; R5900O1-NEXT:    div $zero, $4, $5
; R5900O1-NEXT:    teq $5, $zero, 7
; R5900O1-NEXT:    jr $ra
; R5900O1-NEXT:    mfhi $2
;
; R5900O2-LABEL: SRem32:
; R5900O2:       # %bb.0:
; R5900O2-NEXT:    div $zero, $4, $5
; R5900O2-NEXT:    teq $5, $zero, 7
; R5900O2-NEXT:    jr $ra
; R5900O2-NEXT:    mfhi $2
  %1 = srem i32 %a, %b
  ret i32 %1
}

define i64 @SRem64(i64 signext %a, i64 signext %b) nounwind {
; R5900O0-LABEL: SRem64:
; R5900O0:       # %bb.0:
; R5900O0-NEXT:    addiu $sp, $sp, -16
; R5900O0-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; R5900O0-NEXT:    jal __moddi3
; R5900O0-NEXT:    nop
; R5900O0-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; R5900O0-NEXT:    addiu $sp, $sp, 16
; R5900O0-NEXT:    jr $ra
; R5900O0-NEXT:    nop
;
; R5900O1-LABEL: SRem64:
; R5900O1:       # %bb.0:
; R5900O1-NEXT:    addiu $sp, $sp, -16
; R5900O1-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; R5900O1-NEXT:    jal __moddi3
; R5900O1-NEXT:    nop
; R5900O1-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; R5900O1-NEXT:    jr $ra
; R5900O1-NEXT:    addiu $sp, $sp, 16
;
; R5900O2-LABEL: SRem64:
; R5900O2:       # %bb.0:
; R5900O2-NEXT:    addiu $sp, $sp, -16
; R5900O2-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; R5900O2-NEXT:    jal __moddi3
; R5900O2-NEXT:    nop
; R5900O2-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; R5900O2-NEXT:    jr $ra
; R5900O2-NEXT:    addiu $sp, $sp, 16
  %1 = srem i64 %a, %b
  ret i64 %1
}
