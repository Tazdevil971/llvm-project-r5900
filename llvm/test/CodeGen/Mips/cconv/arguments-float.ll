; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; Soft-float targets
; RUN: llc -mtriple=mips -relocation-model=static -mattr=+soft-float < %s | FileCheck --check-prefixes=O32-SOFT-FLOAT %s
; RUN: llc -mtriple=mipsel -relocation-model=static -mattr=+soft-float < %s | FileCheck --check-prefixes=O32-SOFT-FLOAT %s

; RUN: llc -mtriple=mips64 -relocation-model=static -mattr=+soft-float -target-abi n32 < %s | FileCheck --check-prefixes=N32-SOFT-FLOAT %s
; RUN: llc -mtriple=mips64el -relocation-model=static -mattr=+soft-float -target-abi n32 < %s | FileCheck --check-prefixes=N32-SOFT-FLOAT %s

; RUN: llc -mtriple=mips64 -relocation-model=static -mattr=+soft-float -target-abi n64 < %s | FileCheck --check-prefixes=N64-SOFT-FLOAT %s
; RUN: llc -mtriple=mips64el -relocation-model=static -mattr=+soft-float -target-abi n64 < %s | FileCheck --check-prefixes=N64-SOFT-FLOAT %s

; Hard-float targets
; RUN: llc -mtriple=mips -relocation-model=static < %s | FileCheck --check-prefixes=O32-HARD-FLOAT %s
; RUN: llc -mtriple=mipsel -relocation-model=static < %s | FileCheck --check-prefixes=O32-HARD-FLOAT %s

; RUN: llc -mtriple=mips64 -relocation-model=static -target-abi n32 < %s | FileCheck --check-prefixes=N32-HARD-FLOAT %s
; RUN: llc -mtriple=mips64el -relocation-model=static -target-abi n32 < %s | FileCheck --check-prefixes=N32-HARD-FLOAT %s

; RUN: llc -mtriple=mips64 -relocation-model=static -target-abi n64 < %s | FileCheck --check-prefixes=N64-HARD-FLOAT %s
; RUN: llc -mtriple=mips64el -relocation-model=static -target-abi n64 < %s | FileCheck --check-prefixes=N64-HARD-FLOAT %s

; Single-float targets
; RUN: llc -mtriple=mips -relocation-model=static -mattr=single-float < %s | FileCheck --check-prefixes=O32-SINGLE-FLOAT %s
; RUN: llc -mtriple=mipsel -relocation-model=static -mattr=single-float < %s | FileCheck --check-prefixes=O32-SINGLE-FLOAT %s

; RUN: llc -mtriple=mips64 -relocation-model=static -target-abi n32 -mattr=single-float < %s | FileCheck --check-prefixes=N32-SINGLE-FLOAT %s
; RUN: llc -mtriple=mips64el -relocation-model=static -target-abi n32 -mattr=single-float < %s | FileCheck --check-prefixes=N32-SINGLE-FLOAT %s

; RUN: llc -mtriple=mips64 -relocation-model=static -target-abi n64 -mattr=single-float < %s | FileCheck --check-prefixes=N64-SINGLE-FLOAT %s
; RUN: llc -mtriple=mips64el -relocation-model=static -target-abi n64 -mattr=single-float < %s | FileCheck --check-prefixes=N64-SINGLE-FLOAT %s

; Test the floating point arguments for all ABI's and byte orders as specified
; by section 5 of MD00305 (MIPS ABIs Described).

@bytes = global [11 x i8] zeroinitializer
@dwords = global [11 x i64] zeroinitializer
@floats = global [11 x float] zeroinitializer
@doubles = global [11 x double] zeroinitializer

define void @double_args(double %a, double %b, double %c, double %d, double %e,
; O32-SOFT-FLOAT-LABEL: double_args:
; O32-SOFT-FLOAT:       # %bb.0: # %entry
; O32-SOFT-FLOAT-NEXT:    lui $1, %hi(doubles)
; O32-SOFT-FLOAT-NEXT:    addiu $1, $1, %lo(doubles)
; O32-SOFT-FLOAT-NEXT:    sw $5, 12($1)
; O32-SOFT-FLOAT-NEXT:    sw $4, 8($1)
; O32-SOFT-FLOAT-NEXT:    sw $7, 20($1)
; O32-SOFT-FLOAT-NEXT:    sw $6, 16($1)
; O32-SOFT-FLOAT-NEXT:    lw $2, 20($sp)
; O32-SOFT-FLOAT-NEXT:    sw $2, 28($1)
; O32-SOFT-FLOAT-NEXT:    lw $2, 16($sp)
; O32-SOFT-FLOAT-NEXT:    sw $2, 24($1)
; O32-SOFT-FLOAT-NEXT:    lw $2, 28($sp)
; O32-SOFT-FLOAT-NEXT:    sw $2, 36($1)
; O32-SOFT-FLOAT-NEXT:    lw $2, 24($sp)
; O32-SOFT-FLOAT-NEXT:    sw $2, 32($1)
; O32-SOFT-FLOAT-NEXT:    lw $2, 32($sp)
; O32-SOFT-FLOAT-NEXT:    lw $3, 36($sp)
; O32-SOFT-FLOAT-NEXT:    sw $3, 44($1)
; O32-SOFT-FLOAT-NEXT:    sw $2, 40($1)
; O32-SOFT-FLOAT-NEXT:    lw $2, 64($sp)
; O32-SOFT-FLOAT-NEXT:    lw $3, 68($sp)
; O32-SOFT-FLOAT-NEXT:    lw $4, 56($sp)
; O32-SOFT-FLOAT-NEXT:    lw $5, 60($sp)
; O32-SOFT-FLOAT-NEXT:    lw $6, 48($sp)
; O32-SOFT-FLOAT-NEXT:    lw $7, 52($sp)
; O32-SOFT-FLOAT-NEXT:    lw $8, 40($sp)
; O32-SOFT-FLOAT-NEXT:    lw $9, 44($sp)
; O32-SOFT-FLOAT-NEXT:    sw $9, 52($1)
; O32-SOFT-FLOAT-NEXT:    sw $8, 48($1)
; O32-SOFT-FLOAT-NEXT:    sw $7, 60($1)
; O32-SOFT-FLOAT-NEXT:    sw $6, 56($1)
; O32-SOFT-FLOAT-NEXT:    sw $5, 68($1)
; O32-SOFT-FLOAT-NEXT:    sw $4, 64($1)
; O32-SOFT-FLOAT-NEXT:    sw $3, 76($1)
; O32-SOFT-FLOAT-NEXT:    jr $ra
; O32-SOFT-FLOAT-NEXT:    sw $2, 72($1)
;
; N32-SOFT-FLOAT-LABEL: double_args:
; N32-SOFT-FLOAT:       # %bb.0: # %entry
; N32-SOFT-FLOAT-NEXT:    lui $1, %hi(doubles)
; N32-SOFT-FLOAT-NEXT:    addiu $1, $1, %lo(doubles)
; N32-SOFT-FLOAT-NEXT:    sd $4, 8($1)
; N32-SOFT-FLOAT-NEXT:    sd $5, 16($1)
; N32-SOFT-FLOAT-NEXT:    sd $6, 24($1)
; N32-SOFT-FLOAT-NEXT:    sd $7, 32($1)
; N32-SOFT-FLOAT-NEXT:    sd $8, 40($1)
; N32-SOFT-FLOAT-NEXT:    ld $2, 0($sp)
; N32-SOFT-FLOAT-NEXT:    sd $9, 48($1)
; N32-SOFT-FLOAT-NEXT:    sd $10, 56($1)
; N32-SOFT-FLOAT-NEXT:    sd $11, 64($1)
; N32-SOFT-FLOAT-NEXT:    jr $ra
; N32-SOFT-FLOAT-NEXT:    sd $2, 72($1)
;
; N64-SOFT-FLOAT-LABEL: double_args:
; N64-SOFT-FLOAT:       # %bb.0: # %entry
; N64-SOFT-FLOAT-NEXT:    lui $1, %highest(doubles)
; N64-SOFT-FLOAT-NEXT:    daddiu $1, $1, %higher(doubles)
; N64-SOFT-FLOAT-NEXT:    dsll $1, $1, 16
; N64-SOFT-FLOAT-NEXT:    daddiu $1, $1, %hi(doubles)
; N64-SOFT-FLOAT-NEXT:    dsll $1, $1, 16
; N64-SOFT-FLOAT-NEXT:    daddiu $1, $1, %lo(doubles)
; N64-SOFT-FLOAT-NEXT:    sd $4, 8($1)
; N64-SOFT-FLOAT-NEXT:    ld $2, 0($sp)
; N64-SOFT-FLOAT-NEXT:    sd $5, 16($1)
; N64-SOFT-FLOAT-NEXT:    sd $6, 24($1)
; N64-SOFT-FLOAT-NEXT:    sd $7, 32($1)
; N64-SOFT-FLOAT-NEXT:    sd $8, 40($1)
; N64-SOFT-FLOAT-NEXT:    sd $9, 48($1)
; N64-SOFT-FLOAT-NEXT:    sd $10, 56($1)
; N64-SOFT-FLOAT-NEXT:    sd $11, 64($1)
; N64-SOFT-FLOAT-NEXT:    jr $ra
; N64-SOFT-FLOAT-NEXT:    sd $2, 72($1)
;
; O32-HARD-FLOAT-LABEL: double_args:
; O32-HARD-FLOAT:       # %bb.0: # %entry
; O32-HARD-FLOAT-NEXT:    lui $1, %hi(doubles)
; O32-HARD-FLOAT-NEXT:    addiu $1, $1, %lo(doubles)
; O32-HARD-FLOAT-NEXT:    sdc1 $f12, 8($1)
; O32-HARD-FLOAT-NEXT:    sdc1 $f14, 16($1)
; O32-HARD-FLOAT-NEXT:    ldc1 $f0, 16($sp)
; O32-HARD-FLOAT-NEXT:    sdc1 $f0, 24($1)
; O32-HARD-FLOAT-NEXT:    ldc1 $f0, 24($sp)
; O32-HARD-FLOAT-NEXT:    sdc1 $f0, 32($1)
; O32-HARD-FLOAT-NEXT:    ldc1 $f0, 32($sp)
; O32-HARD-FLOAT-NEXT:    sdc1 $f0, 40($1)
; O32-HARD-FLOAT-NEXT:    ldc1 $f0, 64($sp)
; O32-HARD-FLOAT-NEXT:    ldc1 $f2, 56($sp)
; O32-HARD-FLOAT-NEXT:    ldc1 $f4, 48($sp)
; O32-HARD-FLOAT-NEXT:    ldc1 $f6, 40($sp)
; O32-HARD-FLOAT-NEXT:    sdc1 $f6, 48($1)
; O32-HARD-FLOAT-NEXT:    sdc1 $f4, 56($1)
; O32-HARD-FLOAT-NEXT:    sdc1 $f2, 64($1)
; O32-HARD-FLOAT-NEXT:    jr $ra
; O32-HARD-FLOAT-NEXT:    sdc1 $f0, 72($1)
;
; N32-HARD-FLOAT-LABEL: double_args:
; N32-HARD-FLOAT:       # %bb.0: # %entry
; N32-HARD-FLOAT-NEXT:    lui $1, %hi(doubles)
; N32-HARD-FLOAT-NEXT:    addiu $1, $1, %lo(doubles)
; N32-HARD-FLOAT-NEXT:    sdc1 $f12, 8($1)
; N32-HARD-FLOAT-NEXT:    ldc1 $f0, 0($sp)
; N32-HARD-FLOAT-NEXT:    sdc1 $f13, 16($1)
; N32-HARD-FLOAT-NEXT:    sdc1 $f14, 24($1)
; N32-HARD-FLOAT-NEXT:    sdc1 $f15, 32($1)
; N32-HARD-FLOAT-NEXT:    sdc1 $f16, 40($1)
; N32-HARD-FLOAT-NEXT:    sdc1 $f17, 48($1)
; N32-HARD-FLOAT-NEXT:    sdc1 $f18, 56($1)
; N32-HARD-FLOAT-NEXT:    sdc1 $f19, 64($1)
; N32-HARD-FLOAT-NEXT:    jr $ra
; N32-HARD-FLOAT-NEXT:    sdc1 $f0, 72($1)
;
; N64-HARD-FLOAT-LABEL: double_args:
; N64-HARD-FLOAT:       # %bb.0: # %entry
; N64-HARD-FLOAT-NEXT:    lui $1, %highest(doubles)
; N64-HARD-FLOAT-NEXT:    daddiu $1, $1, %higher(doubles)
; N64-HARD-FLOAT-NEXT:    dsll $1, $1, 16
; N64-HARD-FLOAT-NEXT:    daddiu $1, $1, %hi(doubles)
; N64-HARD-FLOAT-NEXT:    dsll $1, $1, 16
; N64-HARD-FLOAT-NEXT:    daddiu $1, $1, %lo(doubles)
; N64-HARD-FLOAT-NEXT:    sdc1 $f12, 8($1)
; N64-HARD-FLOAT-NEXT:    ldc1 $f0, 0($sp)
; N64-HARD-FLOAT-NEXT:    sdc1 $f13, 16($1)
; N64-HARD-FLOAT-NEXT:    sdc1 $f14, 24($1)
; N64-HARD-FLOAT-NEXT:    sdc1 $f15, 32($1)
; N64-HARD-FLOAT-NEXT:    sdc1 $f16, 40($1)
; N64-HARD-FLOAT-NEXT:    sdc1 $f17, 48($1)
; N64-HARD-FLOAT-NEXT:    sdc1 $f18, 56($1)
; N64-HARD-FLOAT-NEXT:    sdc1 $f19, 64($1)
; N64-HARD-FLOAT-NEXT:    jr $ra
; N64-HARD-FLOAT-NEXT:    sdc1 $f0, 72($1)
;
; O32-SINGLE-FLOAT-LABEL: double_args:
; O32-SINGLE-FLOAT:       # %bb.0: # %entry
; O32-SINGLE-FLOAT-NEXT:    lui $1, %hi(doubles)
; O32-SINGLE-FLOAT-NEXT:    addiu $1, $1, %lo(doubles)
; O32-SINGLE-FLOAT-NEXT:    sw $5, 12($1)
; O32-SINGLE-FLOAT-NEXT:    sw $4, 8($1)
; O32-SINGLE-FLOAT-NEXT:    sw $7, 20($1)
; O32-SINGLE-FLOAT-NEXT:    sw $6, 16($1)
; O32-SINGLE-FLOAT-NEXT:    lw $2, 20($sp)
; O32-SINGLE-FLOAT-NEXT:    sw $2, 28($1)
; O32-SINGLE-FLOAT-NEXT:    lw $2, 16($sp)
; O32-SINGLE-FLOAT-NEXT:    sw $2, 24($1)
; O32-SINGLE-FLOAT-NEXT:    lw $2, 28($sp)
; O32-SINGLE-FLOAT-NEXT:    sw $2, 36($1)
; O32-SINGLE-FLOAT-NEXT:    lw $2, 24($sp)
; O32-SINGLE-FLOAT-NEXT:    sw $2, 32($1)
; O32-SINGLE-FLOAT-NEXT:    lw $2, 32($sp)
; O32-SINGLE-FLOAT-NEXT:    lw $3, 36($sp)
; O32-SINGLE-FLOAT-NEXT:    sw $3, 44($1)
; O32-SINGLE-FLOAT-NEXT:    sw $2, 40($1)
; O32-SINGLE-FLOAT-NEXT:    lw $2, 64($sp)
; O32-SINGLE-FLOAT-NEXT:    lw $3, 68($sp)
; O32-SINGLE-FLOAT-NEXT:    lw $4, 56($sp)
; O32-SINGLE-FLOAT-NEXT:    lw $5, 60($sp)
; O32-SINGLE-FLOAT-NEXT:    lw $6, 48($sp)
; O32-SINGLE-FLOAT-NEXT:    lw $7, 52($sp)
; O32-SINGLE-FLOAT-NEXT:    lw $8, 40($sp)
; O32-SINGLE-FLOAT-NEXT:    lw $9, 44($sp)
; O32-SINGLE-FLOAT-NEXT:    sw $9, 52($1)
; O32-SINGLE-FLOAT-NEXT:    sw $8, 48($1)
; O32-SINGLE-FLOAT-NEXT:    sw $7, 60($1)
; O32-SINGLE-FLOAT-NEXT:    sw $6, 56($1)
; O32-SINGLE-FLOAT-NEXT:    sw $5, 68($1)
; O32-SINGLE-FLOAT-NEXT:    sw $4, 64($1)
; O32-SINGLE-FLOAT-NEXT:    sw $3, 76($1)
; O32-SINGLE-FLOAT-NEXT:    jr $ra
; O32-SINGLE-FLOAT-NEXT:    sw $2, 72($1)
;
; N32-SINGLE-FLOAT-LABEL: double_args:
; N32-SINGLE-FLOAT:       # %bb.0: # %entry
; N32-SINGLE-FLOAT-NEXT:    lui $1, %hi(doubles)
; N32-SINGLE-FLOAT-NEXT:    addiu $1, $1, %lo(doubles)
; N32-SINGLE-FLOAT-NEXT:    sd $4, 8($1)
; N32-SINGLE-FLOAT-NEXT:    sd $5, 16($1)
; N32-SINGLE-FLOAT-NEXT:    sd $6, 24($1)
; N32-SINGLE-FLOAT-NEXT:    sd $7, 32($1)
; N32-SINGLE-FLOAT-NEXT:    sd $8, 40($1)
; N32-SINGLE-FLOAT-NEXT:    ld $2, 0($sp)
; N32-SINGLE-FLOAT-NEXT:    sd $9, 48($1)
; N32-SINGLE-FLOAT-NEXT:    sd $10, 56($1)
; N32-SINGLE-FLOAT-NEXT:    sd $11, 64($1)
; N32-SINGLE-FLOAT-NEXT:    jr $ra
; N32-SINGLE-FLOAT-NEXT:    sd $2, 72($1)
;
; N64-SINGLE-FLOAT-LABEL: double_args:
; N64-SINGLE-FLOAT:       # %bb.0: # %entry
; N64-SINGLE-FLOAT-NEXT:    lui $1, %highest(doubles)
; N64-SINGLE-FLOAT-NEXT:    daddiu $1, $1, %higher(doubles)
; N64-SINGLE-FLOAT-NEXT:    dsll $1, $1, 16
; N64-SINGLE-FLOAT-NEXT:    daddiu $1, $1, %hi(doubles)
; N64-SINGLE-FLOAT-NEXT:    dsll $1, $1, 16
; N64-SINGLE-FLOAT-NEXT:    daddiu $1, $1, %lo(doubles)
; N64-SINGLE-FLOAT-NEXT:    sd $4, 8($1)
; N64-SINGLE-FLOAT-NEXT:    ld $2, 0($sp)
; N64-SINGLE-FLOAT-NEXT:    sd $5, 16($1)
; N64-SINGLE-FLOAT-NEXT:    sd $6, 24($1)
; N64-SINGLE-FLOAT-NEXT:    sd $7, 32($1)
; N64-SINGLE-FLOAT-NEXT:    sd $8, 40($1)
; N64-SINGLE-FLOAT-NEXT:    sd $9, 48($1)
; N64-SINGLE-FLOAT-NEXT:    sd $10, 56($1)
; N64-SINGLE-FLOAT-NEXT:    sd $11, 64($1)
; N64-SINGLE-FLOAT-NEXT:    jr $ra
; N64-SINGLE-FLOAT-NEXT:    sd $2, 72($1)
                         double %f, double %g, double %h, double %i) nounwind {
entry:
        %0 = getelementptr [11 x double], ptr @doubles, i32 0, i32 1
        store volatile double %a, ptr %0
        %1 = getelementptr [11 x double], ptr @doubles, i32 0, i32 2
        store volatile double %b, ptr %1
        %2 = getelementptr [11 x double], ptr @doubles, i32 0, i32 3
        store volatile double %c, ptr %2
        %3 = getelementptr [11 x double], ptr @doubles, i32 0, i32 4
        store volatile double %d, ptr %3
        %4 = getelementptr [11 x double], ptr @doubles, i32 0, i32 5
        store volatile double %e, ptr %4
        %5 = getelementptr [11 x double], ptr @doubles, i32 0, i32 6
        store volatile double %f, ptr %5
        %6 = getelementptr [11 x double], ptr @doubles, i32 0, i32 7
        store volatile double %g, ptr %6
        %7 = getelementptr [11 x double], ptr @doubles, i32 0, i32 8
        store volatile double %h, ptr %7
        %8 = getelementptr [11 x double], ptr @doubles, i32 0, i32 9
        store volatile double %i, ptr %8
        ret void
}

define void @float_args(float %a, float %b, float %c, float %d, float %e,
; O32-SOFT-FLOAT-LABEL: float_args:
; O32-SOFT-FLOAT:       # %bb.0: # %entry
; O32-SOFT-FLOAT-NEXT:    lui $1, %hi(floats)
; O32-SOFT-FLOAT-NEXT:    addiu $1, $1, %lo(floats)
; O32-SOFT-FLOAT-NEXT:    sw $4, 4($1)
; O32-SOFT-FLOAT-NEXT:    sw $5, 8($1)
; O32-SOFT-FLOAT-NEXT:    sw $6, 12($1)
; O32-SOFT-FLOAT-NEXT:    sw $7, 16($1)
; O32-SOFT-FLOAT-NEXT:    lw $2, 16($sp)
; O32-SOFT-FLOAT-NEXT:    sw $2, 20($1)
; O32-SOFT-FLOAT-NEXT:    lw $2, 36($sp)
; O32-SOFT-FLOAT-NEXT:    lw $3, 32($sp)
; O32-SOFT-FLOAT-NEXT:    lw $4, 28($sp)
; O32-SOFT-FLOAT-NEXT:    lw $5, 24($sp)
; O32-SOFT-FLOAT-NEXT:    lw $6, 20($sp)
; O32-SOFT-FLOAT-NEXT:    sw $6, 24($1)
; O32-SOFT-FLOAT-NEXT:    sw $5, 28($1)
; O32-SOFT-FLOAT-NEXT:    sw $4, 32($1)
; O32-SOFT-FLOAT-NEXT:    sw $3, 36($1)
; O32-SOFT-FLOAT-NEXT:    jr $ra
; O32-SOFT-FLOAT-NEXT:    sw $2, 40($1)
;
; N32-SOFT-FLOAT-LABEL: float_args:
; N32-SOFT-FLOAT:       # %bb.0: # %entry
; N32-SOFT-FLOAT-NEXT:    lui $1, %hi(floats)
; N32-SOFT-FLOAT-NEXT:    addiu $1, $1, %lo(floats)
; N32-SOFT-FLOAT-NEXT:    sw $4, 4($1)
; N32-SOFT-FLOAT-NEXT:    sw $5, 8($1)
; N32-SOFT-FLOAT-NEXT:    sw $6, 12($1)
; N32-SOFT-FLOAT-NEXT:    sw $7, 16($1)
; N32-SOFT-FLOAT-NEXT:    sw $8, 20($1)
; N32-SOFT-FLOAT-NEXT:    lw $2, 8($sp)
; N32-SOFT-FLOAT-NEXT:    lw $3, 0($sp)
; N32-SOFT-FLOAT-NEXT:    sw $9, 24($1)
; N32-SOFT-FLOAT-NEXT:    sw $10, 28($1)
; N32-SOFT-FLOAT-NEXT:    sw $11, 32($1)
; N32-SOFT-FLOAT-NEXT:    sw $3, 36($1)
; N32-SOFT-FLOAT-NEXT:    jr $ra
; N32-SOFT-FLOAT-NEXT:    sw $2, 40($1)
;
; N64-SOFT-FLOAT-LABEL: float_args:
; N64-SOFT-FLOAT:       # %bb.0: # %entry
; N64-SOFT-FLOAT-NEXT:    lui $1, %highest(floats)
; N64-SOFT-FLOAT-NEXT:    daddiu $1, $1, %higher(floats)
; N64-SOFT-FLOAT-NEXT:    dsll $1, $1, 16
; N64-SOFT-FLOAT-NEXT:    daddiu $1, $1, %hi(floats)
; N64-SOFT-FLOAT-NEXT:    dsll $1, $1, 16
; N64-SOFT-FLOAT-NEXT:    daddiu $1, $1, %lo(floats)
; N64-SOFT-FLOAT-NEXT:    sw $4, 4($1)
; N64-SOFT-FLOAT-NEXT:    lw $2, 8($sp)
; N64-SOFT-FLOAT-NEXT:    lw $3, 0($sp)
; N64-SOFT-FLOAT-NEXT:    sw $5, 8($1)
; N64-SOFT-FLOAT-NEXT:    sw $6, 12($1)
; N64-SOFT-FLOAT-NEXT:    sw $7, 16($1)
; N64-SOFT-FLOAT-NEXT:    sw $8, 20($1)
; N64-SOFT-FLOAT-NEXT:    sw $9, 24($1)
; N64-SOFT-FLOAT-NEXT:    sw $10, 28($1)
; N64-SOFT-FLOAT-NEXT:    sw $11, 32($1)
; N64-SOFT-FLOAT-NEXT:    sw $3, 36($1)
; N64-SOFT-FLOAT-NEXT:    jr $ra
; N64-SOFT-FLOAT-NEXT:    sw $2, 40($1)
;
; O32-HARD-FLOAT-LABEL: float_args:
; O32-HARD-FLOAT:       # %bb.0: # %entry
; O32-HARD-FLOAT-NEXT:    lui $1, %hi(floats)
; O32-HARD-FLOAT-NEXT:    addiu $1, $1, %lo(floats)
; O32-HARD-FLOAT-NEXT:    swc1 $f12, 4($1)
; O32-HARD-FLOAT-NEXT:    swc1 $f14, 8($1)
; O32-HARD-FLOAT-NEXT:    mtc1 $6, $f0
; O32-HARD-FLOAT-NEXT:    swc1 $f0, 12($1)
; O32-HARD-FLOAT-NEXT:    mtc1 $7, $f0
; O32-HARD-FLOAT-NEXT:    swc1 $f0, 16($1)
; O32-HARD-FLOAT-NEXT:    lwc1 $f0, 16($sp)
; O32-HARD-FLOAT-NEXT:    swc1 $f0, 20($1)
; O32-HARD-FLOAT-NEXT:    lwc1 $f0, 36($sp)
; O32-HARD-FLOAT-NEXT:    lwc1 $f1, 32($sp)
; O32-HARD-FLOAT-NEXT:    lwc1 $f2, 28($sp)
; O32-HARD-FLOAT-NEXT:    lwc1 $f3, 24($sp)
; O32-HARD-FLOAT-NEXT:    lwc1 $f4, 20($sp)
; O32-HARD-FLOAT-NEXT:    swc1 $f4, 24($1)
; O32-HARD-FLOAT-NEXT:    swc1 $f3, 28($1)
; O32-HARD-FLOAT-NEXT:    swc1 $f2, 32($1)
; O32-HARD-FLOAT-NEXT:    swc1 $f1, 36($1)
; O32-HARD-FLOAT-NEXT:    jr $ra
; O32-HARD-FLOAT-NEXT:    swc1 $f0, 40($1)
;
; N32-HARD-FLOAT-LABEL: float_args:
; N32-HARD-FLOAT:       # %bb.0: # %entry
; N32-HARD-FLOAT-NEXT:    lui $1, %hi(floats)
; N32-HARD-FLOAT-NEXT:    addiu $1, $1, %lo(floats)
; N32-HARD-FLOAT-NEXT:    swc1 $f12, 4($1)
; N32-HARD-FLOAT-NEXT:    swc1 $f13, 8($1)
; N32-HARD-FLOAT-NEXT:    swc1 $f14, 12($1)
; N32-HARD-FLOAT-NEXT:    swc1 $f15, 16($1)
; N32-HARD-FLOAT-NEXT:    swc1 $f16, 20($1)
; N32-HARD-FLOAT-NEXT:    lwc1 $f0, 8($sp)
; N32-HARD-FLOAT-NEXT:    lwc1 $f1, 0($sp)
; N32-HARD-FLOAT-NEXT:    swc1 $f17, 24($1)
; N32-HARD-FLOAT-NEXT:    swc1 $f18, 28($1)
; N32-HARD-FLOAT-NEXT:    swc1 $f19, 32($1)
; N32-HARD-FLOAT-NEXT:    swc1 $f1, 36($1)
; N32-HARD-FLOAT-NEXT:    jr $ra
; N32-HARD-FLOAT-NEXT:    swc1 $f0, 40($1)
;
; N64-HARD-FLOAT-LABEL: float_args:
; N64-HARD-FLOAT:       # %bb.0: # %entry
; N64-HARD-FLOAT-NEXT:    lui $1, %highest(floats)
; N64-HARD-FLOAT-NEXT:    daddiu $1, $1, %higher(floats)
; N64-HARD-FLOAT-NEXT:    dsll $1, $1, 16
; N64-HARD-FLOAT-NEXT:    daddiu $1, $1, %hi(floats)
; N64-HARD-FLOAT-NEXT:    dsll $1, $1, 16
; N64-HARD-FLOAT-NEXT:    daddiu $1, $1, %lo(floats)
; N64-HARD-FLOAT-NEXT:    swc1 $f12, 4($1)
; N64-HARD-FLOAT-NEXT:    lwc1 $f0, 8($sp)
; N64-HARD-FLOAT-NEXT:    lwc1 $f1, 0($sp)
; N64-HARD-FLOAT-NEXT:    swc1 $f13, 8($1)
; N64-HARD-FLOAT-NEXT:    swc1 $f14, 12($1)
; N64-HARD-FLOAT-NEXT:    swc1 $f15, 16($1)
; N64-HARD-FLOAT-NEXT:    swc1 $f16, 20($1)
; N64-HARD-FLOAT-NEXT:    swc1 $f17, 24($1)
; N64-HARD-FLOAT-NEXT:    swc1 $f18, 28($1)
; N64-HARD-FLOAT-NEXT:    swc1 $f19, 32($1)
; N64-HARD-FLOAT-NEXT:    swc1 $f1, 36($1)
; N64-HARD-FLOAT-NEXT:    jr $ra
; N64-HARD-FLOAT-NEXT:    swc1 $f0, 40($1)
;
; O32-SINGLE-FLOAT-LABEL: float_args:
; O32-SINGLE-FLOAT:       # %bb.0: # %entry
; O32-SINGLE-FLOAT-NEXT:    lui $1, %hi(floats)
; O32-SINGLE-FLOAT-NEXT:    addiu $1, $1, %lo(floats)
; O32-SINGLE-FLOAT-NEXT:    swc1 $f12, 4($1)
; O32-SINGLE-FLOAT-NEXT:    swc1 $f14, 8($1)
; O32-SINGLE-FLOAT-NEXT:    mtc1 $6, $f0
; O32-SINGLE-FLOAT-NEXT:    swc1 $f0, 12($1)
; O32-SINGLE-FLOAT-NEXT:    mtc1 $7, $f0
; O32-SINGLE-FLOAT-NEXT:    swc1 $f0, 16($1)
; O32-SINGLE-FLOAT-NEXT:    lwc1 $f0, 16($sp)
; O32-SINGLE-FLOAT-NEXT:    swc1 $f0, 20($1)
; O32-SINGLE-FLOAT-NEXT:    lwc1 $f0, 36($sp)
; O32-SINGLE-FLOAT-NEXT:    lwc1 $f1, 32($sp)
; O32-SINGLE-FLOAT-NEXT:    lwc1 $f2, 28($sp)
; O32-SINGLE-FLOAT-NEXT:    lwc1 $f3, 24($sp)
; O32-SINGLE-FLOAT-NEXT:    lwc1 $f4, 20($sp)
; O32-SINGLE-FLOAT-NEXT:    swc1 $f4, 24($1)
; O32-SINGLE-FLOAT-NEXT:    swc1 $f3, 28($1)
; O32-SINGLE-FLOAT-NEXT:    swc1 $f2, 32($1)
; O32-SINGLE-FLOAT-NEXT:    swc1 $f1, 36($1)
; O32-SINGLE-FLOAT-NEXT:    jr $ra
; O32-SINGLE-FLOAT-NEXT:    swc1 $f0, 40($1)
;
; N32-SINGLE-FLOAT-LABEL: float_args:
; N32-SINGLE-FLOAT:       # %bb.0: # %entry
; N32-SINGLE-FLOAT-NEXT:    lui $1, %hi(floats)
; N32-SINGLE-FLOAT-NEXT:    addiu $1, $1, %lo(floats)
; N32-SINGLE-FLOAT-NEXT:    swc1 $f12, 4($1)
; N32-SINGLE-FLOAT-NEXT:    swc1 $f13, 8($1)
; N32-SINGLE-FLOAT-NEXT:    swc1 $f14, 12($1)
; N32-SINGLE-FLOAT-NEXT:    swc1 $f15, 16($1)
; N32-SINGLE-FLOAT-NEXT:    swc1 $f16, 20($1)
; N32-SINGLE-FLOAT-NEXT:    lwc1 $f0, 8($sp)
; N32-SINGLE-FLOAT-NEXT:    lwc1 $f1, 0($sp)
; N32-SINGLE-FLOAT-NEXT:    swc1 $f17, 24($1)
; N32-SINGLE-FLOAT-NEXT:    swc1 $f18, 28($1)
; N32-SINGLE-FLOAT-NEXT:    swc1 $f19, 32($1)
; N32-SINGLE-FLOAT-NEXT:    swc1 $f1, 36($1)
; N32-SINGLE-FLOAT-NEXT:    jr $ra
; N32-SINGLE-FLOAT-NEXT:    swc1 $f0, 40($1)
;
; N64-SINGLE-FLOAT-LABEL: float_args:
; N64-SINGLE-FLOAT:       # %bb.0: # %entry
; N64-SINGLE-FLOAT-NEXT:    lui $1, %highest(floats)
; N64-SINGLE-FLOAT-NEXT:    daddiu $1, $1, %higher(floats)
; N64-SINGLE-FLOAT-NEXT:    dsll $1, $1, 16
; N64-SINGLE-FLOAT-NEXT:    daddiu $1, $1, %hi(floats)
; N64-SINGLE-FLOAT-NEXT:    dsll $1, $1, 16
; N64-SINGLE-FLOAT-NEXT:    daddiu $1, $1, %lo(floats)
; N64-SINGLE-FLOAT-NEXT:    swc1 $f12, 4($1)
; N64-SINGLE-FLOAT-NEXT:    lwc1 $f0, 8($sp)
; N64-SINGLE-FLOAT-NEXT:    lwc1 $f1, 0($sp)
; N64-SINGLE-FLOAT-NEXT:    swc1 $f13, 8($1)
; N64-SINGLE-FLOAT-NEXT:    swc1 $f14, 12($1)
; N64-SINGLE-FLOAT-NEXT:    swc1 $f15, 16($1)
; N64-SINGLE-FLOAT-NEXT:    swc1 $f16, 20($1)
; N64-SINGLE-FLOAT-NEXT:    swc1 $f17, 24($1)
; N64-SINGLE-FLOAT-NEXT:    swc1 $f18, 28($1)
; N64-SINGLE-FLOAT-NEXT:    swc1 $f19, 32($1)
; N64-SINGLE-FLOAT-NEXT:    swc1 $f1, 36($1)
; N64-SINGLE-FLOAT-NEXT:    jr $ra
; N64-SINGLE-FLOAT-NEXT:    swc1 $f0, 40($1)
                        float %f, float %g, float %h, float %i, float %j)
                       nounwind {
entry:
        %0 = getelementptr [11 x float], ptr @floats, i32 0, i32 1
        store volatile float %a, ptr %0
        %1 = getelementptr [11 x float], ptr @floats, i32 0, i32 2
        store volatile float %b, ptr %1
        %2 = getelementptr [11 x float], ptr @floats, i32 0, i32 3
        store volatile float %c, ptr %2
        %3 = getelementptr [11 x float], ptr @floats, i32 0, i32 4
        store volatile float %d, ptr %3
        %4 = getelementptr [11 x float], ptr @floats, i32 0, i32 5
        store volatile float %e, ptr %4
        %5 = getelementptr [11 x float], ptr @floats, i32 0, i32 6
        store volatile float %f, ptr %5
        %6 = getelementptr [11 x float], ptr @floats, i32 0, i32 7
        store volatile float %g, ptr %6
        %7 = getelementptr [11 x float], ptr @floats, i32 0, i32 8
        store volatile float %h, ptr %7
        %8 = getelementptr [11 x float], ptr @floats, i32 0, i32 9
        store volatile float %i, ptr %8
        %9 = getelementptr [11 x float], ptr @floats, i32 0, i32 10
        store volatile float %j, ptr %9
        ret void
}

define void @double_arg2(i8 %a, double %b) nounwind {
; O32-SOFT-FLOAT-LABEL: double_arg2:
; O32-SOFT-FLOAT:       # %bb.0: # %entry
; O32-SOFT-FLOAT-NEXT:    lui $1, %hi(bytes)
; O32-SOFT-FLOAT-NEXT:    addiu $1, $1, %lo(bytes)
; O32-SOFT-FLOAT-NEXT:    sb $4, 1($1)
; O32-SOFT-FLOAT-NEXT:    lui $1, %hi(doubles)
; O32-SOFT-FLOAT-NEXT:    addiu $1, $1, %lo(doubles)
; O32-SOFT-FLOAT-NEXT:    sw $7, 12($1)
; O32-SOFT-FLOAT-NEXT:    jr $ra
; O32-SOFT-FLOAT-NEXT:    sw $6, 8($1)
;
; N32-SOFT-FLOAT-LABEL: double_arg2:
; N32-SOFT-FLOAT:       # %bb.0: # %entry
; N32-SOFT-FLOAT-NEXT:    lui $1, %hi(bytes)
; N32-SOFT-FLOAT-NEXT:    addiu $1, $1, %lo(bytes)
; N32-SOFT-FLOAT-NEXT:    sb $4, 1($1)
; N32-SOFT-FLOAT-NEXT:    lui $1, %hi(doubles)
; N32-SOFT-FLOAT-NEXT:    addiu $1, $1, %lo(doubles)
; N32-SOFT-FLOAT-NEXT:    jr $ra
; N32-SOFT-FLOAT-NEXT:    sd $5, 8($1)
;
; N64-SOFT-FLOAT-LABEL: double_arg2:
; N64-SOFT-FLOAT:       # %bb.0: # %entry
; N64-SOFT-FLOAT-NEXT:    lui $1, %highest(bytes)
; N64-SOFT-FLOAT-NEXT:    daddiu $1, $1, %higher(bytes)
; N64-SOFT-FLOAT-NEXT:    dsll $1, $1, 16
; N64-SOFT-FLOAT-NEXT:    daddiu $1, $1, %hi(bytes)
; N64-SOFT-FLOAT-NEXT:    dsll $1, $1, 16
; N64-SOFT-FLOAT-NEXT:    daddiu $1, $1, %lo(bytes)
; N64-SOFT-FLOAT-NEXT:    sb $4, 1($1)
; N64-SOFT-FLOAT-NEXT:    lui $1, %highest(doubles)
; N64-SOFT-FLOAT-NEXT:    daddiu $1, $1, %higher(doubles)
; N64-SOFT-FLOAT-NEXT:    dsll $1, $1, 16
; N64-SOFT-FLOAT-NEXT:    daddiu $1, $1, %hi(doubles)
; N64-SOFT-FLOAT-NEXT:    dsll $1, $1, 16
; N64-SOFT-FLOAT-NEXT:    daddiu $1, $1, %lo(doubles)
; N64-SOFT-FLOAT-NEXT:    jr $ra
; N64-SOFT-FLOAT-NEXT:    sd $5, 8($1)
;
; N32-HARD-FLOAT-LABEL: double_arg2:
; N32-HARD-FLOAT:       # %bb.0: # %entry
; N32-HARD-FLOAT-NEXT:    lui $1, %hi(bytes)
; N32-HARD-FLOAT-NEXT:    addiu $1, $1, %lo(bytes)
; N32-HARD-FLOAT-NEXT:    sb $4, 1($1)
; N32-HARD-FLOAT-NEXT:    lui $1, %hi(doubles)
; N32-HARD-FLOAT-NEXT:    addiu $1, $1, %lo(doubles)
; N32-HARD-FLOAT-NEXT:    jr $ra
; N32-HARD-FLOAT-NEXT:    sdc1 $f13, 8($1)
;
; N64-HARD-FLOAT-LABEL: double_arg2:
; N64-HARD-FLOAT:       # %bb.0: # %entry
; N64-HARD-FLOAT-NEXT:    lui $1, %highest(bytes)
; N64-HARD-FLOAT-NEXT:    daddiu $1, $1, %higher(bytes)
; N64-HARD-FLOAT-NEXT:    dsll $1, $1, 16
; N64-HARD-FLOAT-NEXT:    daddiu $1, $1, %hi(bytes)
; N64-HARD-FLOAT-NEXT:    dsll $1, $1, 16
; N64-HARD-FLOAT-NEXT:    daddiu $1, $1, %lo(bytes)
; N64-HARD-FLOAT-NEXT:    sb $4, 1($1)
; N64-HARD-FLOAT-NEXT:    lui $1, %highest(doubles)
; N64-HARD-FLOAT-NEXT:    daddiu $1, $1, %higher(doubles)
; N64-HARD-FLOAT-NEXT:    dsll $1, $1, 16
; N64-HARD-FLOAT-NEXT:    daddiu $1, $1, %hi(doubles)
; N64-HARD-FLOAT-NEXT:    dsll $1, $1, 16
; N64-HARD-FLOAT-NEXT:    daddiu $1, $1, %lo(doubles)
; N64-HARD-FLOAT-NEXT:    jr $ra
; N64-HARD-FLOAT-NEXT:    sdc1 $f13, 8($1)
;
; O32-SINGLE-FLOAT-LABEL: double_arg2:
; O32-SINGLE-FLOAT:       # %bb.0: # %entry
; O32-SINGLE-FLOAT-NEXT:    lui $1, %hi(bytes)
; O32-SINGLE-FLOAT-NEXT:    addiu $1, $1, %lo(bytes)
; O32-SINGLE-FLOAT-NEXT:    sb $4, 1($1)
; O32-SINGLE-FLOAT-NEXT:    lui $1, %hi(doubles)
; O32-SINGLE-FLOAT-NEXT:    addiu $1, $1, %lo(doubles)
; O32-SINGLE-FLOAT-NEXT:    sw $7, 12($1)
; O32-SINGLE-FLOAT-NEXT:    jr $ra
; O32-SINGLE-FLOAT-NEXT:    sw $6, 8($1)
;
; N32-SINGLE-FLOAT-LABEL: double_arg2:
; N32-SINGLE-FLOAT:       # %bb.0: # %entry
; N32-SINGLE-FLOAT-NEXT:    lui $1, %hi(bytes)
; N32-SINGLE-FLOAT-NEXT:    addiu $1, $1, %lo(bytes)
; N32-SINGLE-FLOAT-NEXT:    sb $4, 1($1)
; N32-SINGLE-FLOAT-NEXT:    lui $1, %hi(doubles)
; N32-SINGLE-FLOAT-NEXT:    addiu $1, $1, %lo(doubles)
; N32-SINGLE-FLOAT-NEXT:    jr $ra
; N32-SINGLE-FLOAT-NEXT:    sd $5, 8($1)
;
; N64-SINGLE-FLOAT-LABEL: double_arg2:
; N64-SINGLE-FLOAT:       # %bb.0: # %entry
; N64-SINGLE-FLOAT-NEXT:    lui $1, %highest(bytes)
; N64-SINGLE-FLOAT-NEXT:    daddiu $1, $1, %higher(bytes)
; N64-SINGLE-FLOAT-NEXT:    dsll $1, $1, 16
; N64-SINGLE-FLOAT-NEXT:    daddiu $1, $1, %hi(bytes)
; N64-SINGLE-FLOAT-NEXT:    dsll $1, $1, 16
; N64-SINGLE-FLOAT-NEXT:    daddiu $1, $1, %lo(bytes)
; N64-SINGLE-FLOAT-NEXT:    sb $4, 1($1)
; N64-SINGLE-FLOAT-NEXT:    lui $1, %highest(doubles)
; N64-SINGLE-FLOAT-NEXT:    daddiu $1, $1, %higher(doubles)
; N64-SINGLE-FLOAT-NEXT:    dsll $1, $1, 16
; N64-SINGLE-FLOAT-NEXT:    daddiu $1, $1, %hi(doubles)
; N64-SINGLE-FLOAT-NEXT:    dsll $1, $1, 16
; N64-SINGLE-FLOAT-NEXT:    daddiu $1, $1, %lo(doubles)
; N64-SINGLE-FLOAT-NEXT:    jr $ra
; N64-SINGLE-FLOAT-NEXT:    sd $5, 8($1)
entry:
        %0 = getelementptr [11 x i8], ptr @bytes, i32 0, i32 1
        store volatile i8 %a, ptr %0
        %1 = getelementptr [11 x double], ptr @doubles, i32 0, i32 1
        store volatile double %b, ptr %1
        ret void
}

define void @float_arg2(i8 signext %a, float %b) nounwind {
; O32-SOFT-FLOAT-LABEL: float_arg2:
; O32-SOFT-FLOAT:       # %bb.0: # %entry
; O32-SOFT-FLOAT-NEXT:    lui $1, %hi(bytes)
; O32-SOFT-FLOAT-NEXT:    addiu $1, $1, %lo(bytes)
; O32-SOFT-FLOAT-NEXT:    sb $4, 1($1)
; O32-SOFT-FLOAT-NEXT:    lui $1, %hi(floats)
; O32-SOFT-FLOAT-NEXT:    addiu $1, $1, %lo(floats)
; O32-SOFT-FLOAT-NEXT:    jr $ra
; O32-SOFT-FLOAT-NEXT:    sw $5, 4($1)
;
; N32-SOFT-FLOAT-LABEL: float_arg2:
; N32-SOFT-FLOAT:       # %bb.0: # %entry
; N32-SOFT-FLOAT-NEXT:    lui $1, %hi(bytes)
; N32-SOFT-FLOAT-NEXT:    addiu $1, $1, %lo(bytes)
; N32-SOFT-FLOAT-NEXT:    sb $4, 1($1)
; N32-SOFT-FLOAT-NEXT:    lui $1, %hi(floats)
; N32-SOFT-FLOAT-NEXT:    addiu $1, $1, %lo(floats)
; N32-SOFT-FLOAT-NEXT:    jr $ra
; N32-SOFT-FLOAT-NEXT:    sw $5, 4($1)
;
; N64-SOFT-FLOAT-LABEL: float_arg2:
; N64-SOFT-FLOAT:       # %bb.0: # %entry
; N64-SOFT-FLOAT-NEXT:    lui $1, %highest(bytes)
; N64-SOFT-FLOAT-NEXT:    daddiu $1, $1, %higher(bytes)
; N64-SOFT-FLOAT-NEXT:    dsll $1, $1, 16
; N64-SOFT-FLOAT-NEXT:    daddiu $1, $1, %hi(bytes)
; N64-SOFT-FLOAT-NEXT:    dsll $1, $1, 16
; N64-SOFT-FLOAT-NEXT:    daddiu $1, $1, %lo(bytes)
; N64-SOFT-FLOAT-NEXT:    sb $4, 1($1)
; N64-SOFT-FLOAT-NEXT:    lui $1, %highest(floats)
; N64-SOFT-FLOAT-NEXT:    daddiu $1, $1, %higher(floats)
; N64-SOFT-FLOAT-NEXT:    dsll $1, $1, 16
; N64-SOFT-FLOAT-NEXT:    daddiu $1, $1, %hi(floats)
; N64-SOFT-FLOAT-NEXT:    dsll $1, $1, 16
; N64-SOFT-FLOAT-NEXT:    daddiu $1, $1, %lo(floats)
; N64-SOFT-FLOAT-NEXT:    jr $ra
; N64-SOFT-FLOAT-NEXT:    sw $5, 4($1)
;
; O32-HARD-FLOAT-LABEL: float_arg2:
; O32-HARD-FLOAT:       # %bb.0: # %entry
; O32-HARD-FLOAT-NEXT:    lui $1, %hi(bytes)
; O32-HARD-FLOAT-NEXT:    addiu $1, $1, %lo(bytes)
; O32-HARD-FLOAT-NEXT:    sb $4, 1($1)
; O32-HARD-FLOAT-NEXT:    lui $1, %hi(floats)
; O32-HARD-FLOAT-NEXT:    addiu $1, $1, %lo(floats)
; O32-HARD-FLOAT-NEXT:    mtc1 $5, $f0
; O32-HARD-FLOAT-NEXT:    jr $ra
; O32-HARD-FLOAT-NEXT:    swc1 $f0, 4($1)
;
; N32-HARD-FLOAT-LABEL: float_arg2:
; N32-HARD-FLOAT:       # %bb.0: # %entry
; N32-HARD-FLOAT-NEXT:    lui $1, %hi(bytes)
; N32-HARD-FLOAT-NEXT:    addiu $1, $1, %lo(bytes)
; N32-HARD-FLOAT-NEXT:    sb $4, 1($1)
; N32-HARD-FLOAT-NEXT:    lui $1, %hi(floats)
; N32-HARD-FLOAT-NEXT:    addiu $1, $1, %lo(floats)
; N32-HARD-FLOAT-NEXT:    jr $ra
; N32-HARD-FLOAT-NEXT:    swc1 $f13, 4($1)
;
; N64-HARD-FLOAT-LABEL: float_arg2:
; N64-HARD-FLOAT:       # %bb.0: # %entry
; N64-HARD-FLOAT-NEXT:    lui $1, %highest(bytes)
; N64-HARD-FLOAT-NEXT:    daddiu $1, $1, %higher(bytes)
; N64-HARD-FLOAT-NEXT:    dsll $1, $1, 16
; N64-HARD-FLOAT-NEXT:    daddiu $1, $1, %hi(bytes)
; N64-HARD-FLOAT-NEXT:    dsll $1, $1, 16
; N64-HARD-FLOAT-NEXT:    daddiu $1, $1, %lo(bytes)
; N64-HARD-FLOAT-NEXT:    sb $4, 1($1)
; N64-HARD-FLOAT-NEXT:    lui $1, %highest(floats)
; N64-HARD-FLOAT-NEXT:    daddiu $1, $1, %higher(floats)
; N64-HARD-FLOAT-NEXT:    dsll $1, $1, 16
; N64-HARD-FLOAT-NEXT:    daddiu $1, $1, %hi(floats)
; N64-HARD-FLOAT-NEXT:    dsll $1, $1, 16
; N64-HARD-FLOAT-NEXT:    daddiu $1, $1, %lo(floats)
; N64-HARD-FLOAT-NEXT:    jr $ra
; N64-HARD-FLOAT-NEXT:    swc1 $f13, 4($1)
;
; O32-SINGLE-FLOAT-LABEL: float_arg2:
; O32-SINGLE-FLOAT:       # %bb.0: # %entry
; O32-SINGLE-FLOAT-NEXT:    lui $1, %hi(bytes)
; O32-SINGLE-FLOAT-NEXT:    addiu $1, $1, %lo(bytes)
; O32-SINGLE-FLOAT-NEXT:    sb $4, 1($1)
; O32-SINGLE-FLOAT-NEXT:    lui $1, %hi(floats)
; O32-SINGLE-FLOAT-NEXT:    addiu $1, $1, %lo(floats)
; O32-SINGLE-FLOAT-NEXT:    mtc1 $5, $f0
; O32-SINGLE-FLOAT-NEXT:    jr $ra
; O32-SINGLE-FLOAT-NEXT:    swc1 $f0, 4($1)
;
; N32-SINGLE-FLOAT-LABEL: float_arg2:
; N32-SINGLE-FLOAT:       # %bb.0: # %entry
; N32-SINGLE-FLOAT-NEXT:    lui $1, %hi(bytes)
; N32-SINGLE-FLOAT-NEXT:    addiu $1, $1, %lo(bytes)
; N32-SINGLE-FLOAT-NEXT:    sb $4, 1($1)
; N32-SINGLE-FLOAT-NEXT:    lui $1, %hi(floats)
; N32-SINGLE-FLOAT-NEXT:    addiu $1, $1, %lo(floats)
; N32-SINGLE-FLOAT-NEXT:    jr $ra
; N32-SINGLE-FLOAT-NEXT:    swc1 $f13, 4($1)
;
; N64-SINGLE-FLOAT-LABEL: float_arg2:
; N64-SINGLE-FLOAT:       # %bb.0: # %entry
; N64-SINGLE-FLOAT-NEXT:    lui $1, %highest(bytes)
; N64-SINGLE-FLOAT-NEXT:    daddiu $1, $1, %higher(bytes)
; N64-SINGLE-FLOAT-NEXT:    dsll $1, $1, 16
; N64-SINGLE-FLOAT-NEXT:    daddiu $1, $1, %hi(bytes)
; N64-SINGLE-FLOAT-NEXT:    dsll $1, $1, 16
; N64-SINGLE-FLOAT-NEXT:    daddiu $1, $1, %lo(bytes)
; N64-SINGLE-FLOAT-NEXT:    sb $4, 1($1)
; N64-SINGLE-FLOAT-NEXT:    lui $1, %highest(floats)
; N64-SINGLE-FLOAT-NEXT:    daddiu $1, $1, %higher(floats)
; N64-SINGLE-FLOAT-NEXT:    dsll $1, $1, 16
; N64-SINGLE-FLOAT-NEXT:    daddiu $1, $1, %hi(floats)
; N64-SINGLE-FLOAT-NEXT:    dsll $1, $1, 16
; N64-SINGLE-FLOAT-NEXT:    daddiu $1, $1, %lo(floats)
; N64-SINGLE-FLOAT-NEXT:    jr $ra
; N64-SINGLE-FLOAT-NEXT:    swc1 $f13, 4($1)
entry:
        %0 = getelementptr [11 x i8], ptr @bytes, i32 0, i32 1
        store volatile i8 %a, ptr %0
        %1 = getelementptr [11 x float], ptr @floats, i32 0, i32 1
        store volatile float %b, ptr %1
        ret void
}
